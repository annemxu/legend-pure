// import meta::relational::metamodel::*;
// import meta::json::*;
// import meta::json::tests::*;
// import meta::relational::tests::*;
// import meta::pure::profiles::*;
// import meta::relational::metamodel::execute::*;
// import meta::pure::runtime::*;
// import meta::relational::runtime::*;
// import meta::pure::functions::asserts::*;
// import meta::relational::tests::databaseTestPattern::*;
// import meta::relational::metamodel::execute::*;


// function <<test.Test>> meta::relational::tests::databaseTestPattern::keywords::testtColumnNameOid():Any[1]
// {      
//     (getDatabases() -> fold ({
//     currDatabaseType, nxtType | 
//     let connection = getConnectionTest($currDatabaseType) -> cast(@TestDatabaseConnection); 
//     executeInDb('Drop table if exists TableColumnKeywordTest;', $connection);
//     executeInDb('Create Table TableColumnKeywordTest(oid INT);', $connection);
//     let res = executeInDb('select * from TableColumnKeywordTest', $connection);
//     let columnNames = $res.columnNames;
//     assertEquals('OID' , $columnNames);
//     }, 0));
// }

// function <<test.Test>> meta::relational::tests::databaseTestPattern::keywords::testtColumnNameXmin():Any[1]
// {      
//     (getDatabases() -> fold ({
//     currDatabaseType, nxtType | 
//     let connection = getConnectionTest($currDatabaseType) -> cast(@TestDatabaseConnection); 
//     executeInDb('Drop table if exists TableColumnKeywordTest;', $connection);
//     executeInDb('Create Table TableColumnKeywordTest(xmin INT);', $connection);
//     let res = executeInDb('select * from TableColumnKeywordTest', $connection);
//     let columnNames = $res.columnNames;
//     assertEquals('XMIN' , $columnNames);
//     }, 0));
// }

// function <<test.Test>> meta::relational::tests::databaseTestPattern::columns::testtColumnNameSystem():Any[1]
// {      
//     (getDatabases() -> fold ({
//     currDatabaseType, nxtType |
//     let connection = getConnectionTest($currDatabaseType) -> cast(@TestDatabaseConnection); 
//     executeInDb('Drop table if exists TableColumnKeywordTest;', $connection);
//     executeInDb('Create Table TableColumnKeywordTest(system INT);', $connection);
//     let res = executeInDb('select * from TableColumnKeywordTest', $connection);
//     let columnNames = $res.columnNames;
//     assertEquals('SYSTEM' , $columnNames);
//     }, 0));
// }

// function <<test.Test>> meta::relational::tests::databaseTestPattern::columns::testtColumnNameSystemQuoted():Any[1]
// {      
//     (getDatabases() -> fold ({
//     currDatabaseType, nxtType |
//     let connection = getConnectionTest($currDatabaseType) -> cast(@TestDatabaseConnection); 
//     executeInDb('Drop table if exists TableColumnKeywordTest;', $connection);
//     executeInDb('Create Table TableColumnKeywordTest("system" INT);', $connection);
//     let res = executeInDb('select * from TableColumnKeywordTest', $connection);
//     let columnNames = $res.columnNames;
//     assertEquals('SYSTEM' , $columnNames);
//     }, 0));
// }

