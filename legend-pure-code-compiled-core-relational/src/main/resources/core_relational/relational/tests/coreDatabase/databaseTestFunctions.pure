###Mapping
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::mapping::sqlFunction::model::store::*;
import meta::relational::tests::databaseTestPattern::functions::*;


Mapping meta::relational::tests::mapping::sqlTestFunction::model::mapping::testSQLMapping
(
    SqlTestFunctionDemo: Relational
    {
       scope([myDB] dataTable)
       (
          concatResult : concat(string1, string2),
          rtrimResult  :rtrim(string2),
          ltrimResult  :ltrim(string2),
          trimResult   :trim(string2),
          string1Left : left(string1,2),
          string1Right: right(string1,2),
          string3Integer: parseInteger(string3),
          string1Upper: toUpper(string1),
          string1Lower: toLower(string1),
          int1String: toString(int1),
          float1Round: round(float1),
          float1Ceiling: ceiling(float1),
          float1Floor: floor(float1),
          float1StdDevSample: stdDevSample(int1),
          float1StdDevPopulation: stdDevPopulation(int1),
          floatSinResult : sin(float1),
          floatCosResult : cos(float1),
          floatTanResult : tan(float1),
          floatASinResult : asin(divide(int1,2)),
          floatACosResult : acos(divide(int1,2)),
          floatATanResult : atan(float1),
          floatATan2Result : atan2(float1, int1),
          floatSqrtResult : sqrt(int1),
          string2Float : parseFloat(string2float),
          string2Decimal : parseDecimal(string2Decimal),
          string2decimal: trim(string2Decimal),
          string2Date  : parseDate(string2date),
          string2Integer  : parseInteger(string2Integer),
          convertToDate1: convertDate(stringDateFormat),
          convertToDate: convertDate(stringDateFormat,'yyyy-MM-dd'),
          convertToDateUserDefinedFormat3: convertDate(stringUserDefinedDateFormat,'DD/MM/YYYY'),
          convertToDateUserDefinedFormat2: convertDate(stringUserDefinedDateFormat,'YYYY/MM/DD'),
          convertToDateUserDefinedFormat1: convertDate(stringUserDefinedDateFormat,'MMMYYYY'),
          convertToDateUserDefinedFormat: convertDate(stringUserDefinedDateFormat,'MMMyyyy'),
          convertToDateTime: convertDateTime(stringDateTimeFormat,'yyyy-MM-dd hh:mm:ss.mmm'),
          convertToDateTimeUserDefinedFormat: convertDateTime(stringDateTimeFormat,'YYYY-MM-DDTHH:MI:SS'),
          convertToDateTimeUserDefinedFormat1: convertDateTime(stringDateTimeFormat,'YYYY-MM-DDTHH:MI:SS.FF'),
          replaceResult: replace(string1, 'J', 'P'),
          powerResult: pow(float1, 3),
          expResult: exp(float1),
          logResult: log(float1),
          floatModResult : mod(int1, 2),
          floatRemResult : rem(int1, 2),
          convertVarchar128 : convertVarchar128(int1),
          indexOfResult: indexOf('String Random','o'),
          isNumericResult1: isNumeric(stringToInt, stringToInt),
          isNumericResult2: isNumeric(alphaNumericString, alphaNumericString),
          hour : hour(dateTime),
          month : monthNumber(dateTime),
          week : weekOfYear(dateTime),
          date : datePart(dateTime)
       )

    }
)


###Pure

import meta::relational::metamodel::*;
import meta::json::*;
import meta::json::tests::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::relational::metamodel::execute::*;
import meta::pure::runtime::*;
import meta::relational::runtime::*;
import meta::pure::functions::asserts::*;
import meta::relational::tests::databaseTestPattern::*;
import meta::relational::metamodel::execute::*;
import meta::relational::mapping::*;
import meta::relational::tests::model::simple::*;
import meta::relational::tests::mapping::embedded::advanced::mapping::*;
import meta::csv::*;
import meta::relational::functions::asserts::*;
import meta::relational::metamodel::join::*;
import meta::relational::tests::tds::tdsJoin::*;
import meta::relational::tests::mapping::sqlFunction::model::domain::*;
import meta::relational::tests::databaseTestPattern::*;

import  meta::pure::router::extension::*;
import  meta::relational::tests::databaseTestPattern::functions::*;
import  meta::relational::tests::mapping::sqlTestFunction::model::mapping::*;

import meta::pure::router::*;

function <<test.BeforePackage>> meta::relational::tests::databaseTestPattern::functions::setUp():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType | 
    let connection = getConnectionTest($currDatabaseType) ->cast(@DatabaseConnection);

executeEID('Drop table if exists dataTable;',|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());

executeEID('Create Table dataTable( int1 INTEGER PRIMARY KEY,string1 VARCHAR(200),string2 VARCHAR(200),string3 VARCHAR(200),string2float  VARCHAR(200),string2Decimal VARCHAR(200),string2Integer  VARCHAR(200),string2date  VARCHAR(200),stringDateFormat VARCHAR(12),stringDateTimeFormat VARCHAR(32),dateTime TIMESTAMP,float1 Float,stringUserDefinedDateFormat VARCHAR(7),stringToInt VARCHAR(5),alphaNumericString VARCHAR(15));',|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
executeEID('insert into dataTable (int1, string1, string2, string3, dateTime, float1,string2float,string2Decimal,string2date,stringDateFormat,stringDateTimeFormat,stringUserDefinedDateFormat, stringToInt, alphaNumericString ) values (1, \'Joe\', \' Bloggs \', 10, \'2003-07-19 05:00:00\', 1.1,\'123.456\',\'123.450021\', \'2016-06-23 00:00:00.123\',\'2016-06-23\',\'2016-06-23 13:00:00.123\', \'NOV1995\', \'33\', \'loremipsum33\' )',|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
executeEID('insert into dataTable (int1, string1, string2, string3, dateTime, float1,string2float,string2Decimal,string2date,stringDateFormat,stringDateTimeFormat,stringUserDefinedDateFormat, stringToInt, alphaNumericString ) values (2, \'Mrs\', \'Smith\', 11, \'2003-07-20 02:00:00\', 1.8,\'100.001\', \'0100.009\',\'2016-06-23 00:00:00.345\',\'2016-02-23\',\'2016-02-23 23:00:00.1345\', \'NOV1995\', \'42\', \'lorem42ipsum\')',|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());

     true;
    }) -> fold ({a,b | $a && $b }, true ); 



}

function <<test.Test>>  meta::relational::tests::databaseTestPattern::functions::testConcatString():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType | 
    let result = execute(|Person.all()->project([p|$p.name, p|$p.addresses.name], ['name','address']),simpleRelationalMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
   print($result.values);
   true;
    }) -> fold ({a,b | $a && $b }, true ); 
}


Class meta::relational::tests::databaseTestPattern::functions::SqlTestFunctionDemo
{
   concatResult :String[1];
   rtrimResult  :String[1];
   ltrimResult  :String[1];
   trimResult: String[1];
   string1Left : String[1];
   string1Right : String[1];
   string3Integer : Integer[1];
   string1Upper: String[1];
   string1Lower: String[1];
   int1String: String[1];
   float1Round: Integer[1];
   float1Ceiling: Integer[1];
   float1Floor: Integer[1];
   float1StdDevSample: Float[1];
   float1StdDevPopulation: Float[1];
   floatSinResult : Float[1];
   floatCosResult : Float[1];
   floatTanResult : Float[1];
   floatASinResult : Float[1];
   floatACosResult : Float[1];
   floatATanResult : Float[1];
   floatATan2Result : Float[1];
   floatSqrtResult : Float[1];
   string2Float : Float[1];
   string2decimal: String[1];
   string2Decimal: Decimal[1];
   string2Integer : Integer[1];
   floatModResult : Integer[1];
   floatRemResult : Integer[1];

   string2Date: Date[1];
   string2DateTime: DateTime[1];
   convertToDate1: Date[1];
   convertToDate: Date[1];
   convertToDateUserDefinedFormat: Date[1];
   convertToDateUserDefinedFormat1: Date[1];
   convertToDateUserDefinedFormat2: Date[1];
   convertToDateUserDefinedFormat3: Date[1];
   convertToDateTime: DateTime[1];
   convertToDateTimeUserDefinedFormat: DateTime[1];
   convertToDateTimeUserDefinedFormat1: DateTime[1];
   replaceResult: String[1];
   powerResult: Float[1];
   expResult: Float[1];
   logResult: Float[1];
   convertVarchar128: String[1];
   indexOfResult : Integer[1];
   isNumericResult1 : Boolean[1];
   isNumericResult2 : Boolean[1];
   hour : Integer[1];
   month : Integer[1];
   week : Integer[1];
   date : Date[1];
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testhourEIDCustom():Any[*]
{
  println('testing custom eib process');
  getDatabases() -> map ({
    currDatabaseType |
    
        // let result = executeEID('Create Table dataTableDoesNotExistEIDCustom (oid INT, name VARCHAR(200);',|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
  
    let result = executeEID('Drop table if exists dataTableDoesNotExistEIDCustom;', getRuntime($currDatabaseType));
   true;

    }) -> fold ({a,b | $a && $b }, true );
}



function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testhour():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.hour], ['hour']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([5.0, 2.0], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}


function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testweekofyear():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.week], ['week']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([29, 29], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testcast():Any[*]
{
 getDatabases() -> map ({
    currDatabaseType |
  let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.string3Integer], ['string3Integer']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
  assertSize($result.values, 1);
  assertSameElements([10, 11], $result.values.rows.values);

  }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testtoString():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.int1String], ['int1String']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements(['1', '2'], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}



function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testNow():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute( |Trade.all()->filter(d | $d.date == today())->project(x | $x.date, 'date'), simpleRelationalMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::teststddev_samp():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.float1StdDevSample], ['float1StdDevSample']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([0.7071067811865476], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::teststddev_pop():Any[*]
{
 getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.float1StdDevPopulation], ['float1StdDevPopulation']), testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([0.5], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}


function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testsubstring():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute( |Person.all()->filter(p|$p.firstName->substring(1, 3) == 'Joh'),simpleRelationalMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 2);
    true;
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testsecond():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute( |Trade.all()->project([ t | $t.settlementDateTime->cast(@Date)->toOne()->second()], ['second']), simpleRelationalMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);

    }) -> fold ({a,b | $a && $b }, true );
}


function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testrtrim():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.rtrimResult], ['rtrim']),testSQLMapping,  getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([' Bloggs', 'Smith'], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testround():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.float1Round], ['round']), testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([1.0, 2.0], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testright():Any[*]
{
  getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.string1Right], ['right']), testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements(['oe', 'rs'], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testrem():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
  let result = execute( |Trade.all()->project([t| rem($t.quantity, $t.id)], ['rem']),       meta::relational::tests::simpleRelationalMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
  assertSize($result.values, 1);
  assertSameElements([ 0.0, 0.0, 2.0, 3.0, 2.0, 3.0, 2.0, 6.0, 0.0, 8.0, 5.0], $result.values.rows.values);

    }) -> fold ({a,b | $a && $b }, true );
}

// function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testposition():Any[*]
// {
//      getDatabases() -> fold ({
//    currDatabaseType, nxtType |
//     let result = meta::relational::functions::sqlstring::toSQLString(
//         |meta::relational::tests::mapping::propertyfunc::model::domain::Person.all()->project(p|$p.firstName, 'firstName'),
//         meta::relational::tests::mapping::propertyfunc::model::mapping::PropertyfuncMapping,
//         meta::pure::router::extension::defaultRelationalExtensions());
//     assertEquals('select substring(`root`.FULLNAME, 0, strpos(\',\', `root`.FULLNAME)-1) as `firstName` from personTable as `root`', $result);
//  true;
//     }) -> fold ({a,b | $a && $b }, true );
// }

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testparseInteger():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
     let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.string2Integer], ['parseInteger']),testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
     true;
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testparseFloat():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.string2Float], ['string2Float']),testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([  123.456, 100.001], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testparseDecimal():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.string2Decimal], ['string2Decimal']),testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([  100.0D, 123.0D], $result.values.rows.values);
  true;
    }) -> fold ({a,b | $a && $b }, true );
}

// month same as month number
//TODO: correct returning  <@_00f0cb3 instanceOf meta::pure::tds::TDSNull>
function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testmonthNumber():Any[*]
{
   getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|Trade.all()->project([t| monthNumber($t.settlementDateTime)], ['settlementMonthNumber']), simpleRelationalMapping,  getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([ 12, 12, 12, 12, 12, 12, 12, 12, 12], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}


//TODO: change null
function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testyear():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|Trade.all()->filter(f| $f.id->in([9,10]))->project([t| year($t.settlementDateTime)], 
    ['year']), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSize($result.values.rows, 2);
    assertEquals([2014,^TDSNull()], $result.values.rows.values);
    assertEquals('select year("root".settlementDateTime) as "year" from tradeTable as "root" where "root".ID in (9, 10)', $result->sqlRemoveFormatting());
    }) -> fold ({a,b | $a && $b }, true );
}


function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testmod():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlTestFunctionDemo.all()->project([s | $s.floatModResult ], ['mod']),testSQLMapping, getRuntime($currDatabaseType), defaultRelationalExtensions());
    assertSize($result.values, 1);
    assertSameElements([ 1,0], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

//TODO: correct returning  <@_00f0cb3 instanceOf meta::pure::tds::TDSNull>, <@_00f0cb3 instanceOf meta::pure::tds::TDSNull> run sql on query editor
function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testminute():Any[*]
{
     getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|Trade.all()->project([t | $t.settlementDateTime->cast(@Date)->toOne()->minute()],['settlementDateTimeMinute']),simpleRelationalMapping,  getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSameElements([ 0, 0, 0, 0, 0, 0, 22, 0, 0], $result.values.rows.values);
     true;
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testatan2():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|Trade.all()->filter(t | atan2($t.id, $t.quantity) < 0.2), simpleRelationalMapping,  getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSameElements([1, 2, 4, 5, 7, 9], $result.values.id);
    assertSameSQL('select "root".ID as "pk_0", "root".ID as "id", "root".quantity as "quantity", "root".tradeDate as "date", "root".settlementDateTime as "settlementDateTime", "tradeeventviewmaxtradeeventdate_0".maxTradeEventDate as "latestEventDate" from tradeTable as "root" left outer join (select "root".trade_id as trade_id, max("root".eventDate) as maxTradeEventDate from tradeEventTable as "root" group by "root".trade_id) as "tradeeventviewmaxtradeeventdate_0" on ("root".ID = "tradeeventviewmaxtradeeventdate_0".trade_id) where atan2("root".ID,"root".quantity) < 0.2', $result);

    }) -> fold ({a,b | $a && $b }, true );
}


function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::concat():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|meta::pure::functions::tests::model::Person.all()->map(p|$p.firstName+' '+$p.lastName), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSize($result.values, 7);
    assertSameElements(['Anthony Allen', 'David Harris', 'Fabrice Roberts', 'John Johnson', 'John Hill', 'Oliver Hill', 'Peter Smith'], $result.values);
    assertEquals('select concat("root".FIRSTNAME, \' \', "root".LASTNAME) from personTable as "root"', $result->meta::relational::mapping::sqlRemoveFormatting());
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testdayOfMonth():Any[*]
{
   getDatabases() -> map ({
    currDatabaseType |

    //todo: get rid of this executeindb no executeindb :O
    meta::relational::tests::createTradeTableAndFillDb( getConnectionTest($currDatabaseType) -> cast(@DatabaseConnection));
    let result = execute(|meta::relational::tests::model::simple::Trade.all()->filter(f| $f.id->in([9]))->project([t| $t.settlementDateTime->toOne(), t| $t.settlementDateTime->toOne()->dayOfMonth()], ['Date', 'Settlement Day Of Month']), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertSize($result.values.rows, 1);
    assertEquals([%2014-12-05T21:00:00.000000000+0000, 12.0], $result.values.rows.values);
  }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testadjustWithMicroseconds():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
   let result = execute(|Trade.all()->filter(d | ($d.settlementDateTime > %2014-12-04T15:22:23->adjust(123456, DurationUnit.MICROSECONDS)) && ($d.settlementDateTime < %2014-12-04T15:22:23->adjust(123457, DurationUnit.MICROSECONDS)))->project(x | $x.settlementDateTime, 'settlementDateTime'), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
   //assertEquals('select "root".settlementDateTime as "settlementDateTime" from tradeTable as "root" where (("root".settlementDateTime is not null and "root".settlementDateTime > dateadd(MICROSECOND, 123456, \'2014-12-04 15:22:23\')) and ("root".settlementDateTime is not null and "root".settlementDateTime < dateadd(MICROSECOND, 123457, \'2014-12-04 15:22:23\')))', $result->sqlRemoveFormatting());
   assertSize($result.values.rows, 1);
   assertSameElements([%2014-12-04T15:22:23.123456789], $result.values.rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testquarter():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|Trade.all()->filter(t | $t.date->quarterNumber() == 4), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
   assertSameElements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], $result.values.id->sort());
   let result2 = execute(|Trade.all()->filter(t | $t.date->quarterNumber() == 2), simpleRelationalMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
   assertSameElements([], $result2.values.id->sort());
    }) -> fold ({a,b | $a && $b }, true );
}



function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testadjust():Any[*]
{
  //fail different results than expected
    getDatabases() -> map ({
    currDatabaseType |

  let result = execute(
      |Person.all()
         ->project(p|$p.firstName,'firstName')
         ->project([col(r:TDSRow[1]|$r.getString('firstName'), 'firstName'),
            col({r:TDSRow[1]|now()->adjust(1, DurationUnit.DAYS) > now()}, 'tomorrowGreaterThanToday')]),
      simpleRelationalMapping,
     getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());

   let tds = $result.values->at(0);

   assertSize($tds.columns, 2);

   println($tds);

   assertEquals('Peter|true,John|true,John|true,Anthony|true,Fabrice|true,Oliver|true,David|true',
      $tds.rows->map(r|$r.values->makeString('|'))->makeString(','));

    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testindexOf():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlFunctionDemo.all()->project([s | $s.indexOfResult], ['indexOf']), meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertEquals([12,12], $result.values->at(0).rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}

function <<test.Test>> meta::relational::tests::databaseTestPattern::functions::testindexOfTest():Any[*]
{
    getDatabases() -> map ({
    currDatabaseType |
    let result = execute(|SqlFunctionDemo.all()->project([s | $s.indexOfResult], ['indexOf']), meta::relational::tests::mapping::sqlFunction::model::mapping::testMapping, getRuntime($currDatabaseType), meta::pure::router::extension::defaultRelationalExtensions());
    assertEquals([12,12], $result.values->at(0).rows.values);
    }) -> fold ({a,b | $a && $b }, true );
}