// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


import meta::relational::metamodel::*;
import meta::json::*;
import meta::json::tests::*;
import meta::relational::tests::*;
import meta::pure::profiles::*;
import meta::relational::metamodel::execute::*;
import meta::pure::runtime::*;
import meta::relational::runtime::*;


function meta::relational::tests::databaseCoreTests::testColumnNameOid( dbType: DatabaseType[1]):Boolean[1]
{        
  let connection = ^TestDatabaseConnection(element = db, type = $dbType); 
  createTempTable('tt', ^Column(name='oid', type=^meta::relational::metamodel::datatype::Integer()), 
  {ttName:String[1], cols: Column[*], dbType: DatabaseType[1]| 'Create LOCAL TEMPORARY TABLE tt (oid INT)'}, true, $connection);
  let res = executeInDb('select * from tt', $connection, 0, 1000);
  let columnNames = $res.columnNames;
  assert('OID' == $columnNames, |'');
}

function meta::relational::tests::databaseCoreTests::testColumnNameSystem( dbType: DatabaseType[1]):Boolean[1]
{        
  let connection = ^TestDatabaseConnection(element = db, type = $dbType); 
  createTempTable('tt', ^Column(name='system', type=^meta::relational::metamodel::datatype::Integer()), 
  {ttName:String[1], cols: Column[*], dbType: DatabaseType[1]| 'Create LOCAL TEMPORARY TABLE tt (system INT)'}, true, $connection);
  let res = executeInDb('select * from tt', $connection, 0, 1000);
  let columnNames = $res.columnNames;
  assert('SYSTEM' == $columnNames, |'');
}

function meta::relational::tests::databaseCoreTests::testColumnNameLowercase( dbType: DatabaseType[1]):Boolean[1]
{        
  let connection = ^TestDatabaseConnection(element = db, type = $dbType); 
  createTempTable('tt', ^Column(name='lowercase', type=^meta::relational::metamodel::datatype::Integer()), 
  {ttName:String[1], cols: Column[*], dbType: DatabaseType[1]| 'Create LOCAL TEMPORARY TABLE tt (lowercase INT)'}, true, $connection);
  let res = executeInDb('select * from tt', $connection, 0, 1000);
  let columnNames = $res.columnNames;
  assert('lowercase' == $columnNames, |'');
}
